## Naive Approach:

It is the brute force method to do the same. Take all the elements of arr1 and arr2 in arr3. Then simply sort the arr3.

Time Complexity : O((m+n) log(m+n)) , the whole size of arr3 is m+n
Auxiliary Space: O(1), No extra space is used



## M-1 2 pointer approach 2 

Create an array arr3[] of size n1 + n2.
Copy all n1 elements of arr1[] to arr3[]
Traverse arr2[] and one by one insert elements (like insertion sort) of arr3[] to arr1[]. This step take O(n1 * n2) time.


class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int ans[]=new int[m+n];
       int i=0;
        int j=0;
        int k=0;
        while(i<m && j<n)
        {
            if(nums1[i]<nums2[j])
            {
                ans[k]=nums1[i];
                k++;
                i++;
                
            }
            else 
            {
                ans[k]=nums2[j];
                k++;
                j++;
            }
        }
        while(i<m)
        {
            ans[k]=nums1[i];
            k++;
            i++;
        }
        while(j<n)
        {
            ans[k]=nums2[j];
            k++;
            j++;
        }
        for(int ii=0;ii<k;ii++)
        {
            nums1[ii]=ans[ii];
        }
    }
}

Time Complexity : O(n1 + n2) 
Auxiliary Space : O(n1 + n2)

