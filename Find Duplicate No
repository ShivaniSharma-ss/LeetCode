
##Sort
Sorting the array first, then use a loop scanning from 1 to n.

With extra O(logn) space, with modifying the input.

    public static int findDuplicate_sort(int[] nums) {
        Arrays.sort(nums);
        int len = nums.length;
        for (int i = 1; i < len; i++) {
            if (nums[i] == nums[i - 1]) {
                return nums[i];
            }
        }

        return len;
    }
Analysis
Time Complexity: O(nlogn)
Space Complexity: O(logn)

##Using 2 loops


public static int findDuplicate_2loops(int[] nums) {
        int len = nums.length;
        for (int i = 0; i < len; i++) {
            for (int j = i + 1; j < len; j++) {
                if (nums[i] == nums[j]) {
                    return nums[i];
                }
            }
        }

        return len;
    }
Analysis
Time Complexity: O(n^2)
Space Complexity: O(1)

## M-2 Count Method
 public static int findDuplicate(int[] nums) {
        int len = nums.length;
        int[] cnt = new int[len + 1];
        for (int i = 0; i < len; i++) {
            cnt[nums[i]]++;
            if (cnt[nums[i]] > 1) {
                return nums[i];
            }
        }

        return len;
    }
T.C  O(n)
S.C O(n)



Brute Force (2 Loops)
Since solve the problem without modifying the array nums and uses only constant extra space, we can use Brute Force to solve it.

It's easy to use 2 loops to do it, but the time complexity is O(n^2), so it wouldn't accepted as timeout.

    // 2 Loops
    public static int findDuplicate_2loops(int[] nums) {
        int len = nums.length;
        for (int i = 0; i < len; i++) {
            for (int j = i + 1; j < len; j++) {
                if (nums[i] == nums[j]) {
                    return nums[i];
                }
            }
        }

        return len;
    }
Analysis
Time Complexity: O(n^2)
Space Complexity: O(1)


    Set<Integer> set = new HashSet<>();
        int len = nums.length;
        for (int i = 0; i < len; i++) {
            if (!set.add(nums[i])) {
                return nums[i];
            }
        }

        return len;
    }
Analysis
Time Complexity: O(n)
Space Complexity: O(n)


## Optimized methid(Using negative nos)

class Solution {
    public int findDuplicate(int[] nums) {
        for(int i=0;i<nums.length;i++)
        {
            int index=Math.abs(nums[i]);
                if(nums[index]<1)
                {
                    return index;
                }
            nums[index]=-nums[index];
        }
        return -1;
    }
}
T.C O(n)
S.C O(1)


Floyd Cycle Finding Algorithm

 public int findDuplicate(int[] nums) {
       int slow=nums[0];
        int fast=nums[0];
        do{
            slow=nums[slow];
            fast=nums[nums[fast]];
        }
        while(slow!=fast);
        
        fast=nums[0];
        while(slow!=fast)
        {
            slow=nums[slow];
            fast=nums[fast];
        }
        return slow;
    }
    
    T.C O(n)
    S.C O(1)
