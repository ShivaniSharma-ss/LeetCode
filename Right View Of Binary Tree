Right View Of Binary Tree

Using Level Order Traversal
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        LinkedList<Integer> list = new LinkedList<>();
        if(root==null)
            return list;
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while(q.isEmpty()==false){
            int count = q.size();
            for(int i=0;i<count;i++){
                TreeNode cur= q.poll();
                if(i==count-1)
                    list.add(cur.val);
                if(cur.left!=null)
                    q.add(cur.left);
                if(cur.right!=null)
                    q.add(cur.right);
            }
        }
        return list;
    }
}

M-2 Using Recursion

class Solution {
    public List<Integer> rightSideView(TreeNode root) {
      List<Integer>list=new ArrayList<Integer>();
      list=  printRightView(root,list,0);
        return list;
    }
    public List<Integer>printRightView(TreeNode root,List<Integer>list,int level)
    {
        if(root==null) return list;
       if(list.size()==level) list.add(root.val);
        
        printRightView(root.right,list,level+1);
         printRightView(root.left,list,level+1);
       
         return list;
    }
   
}
