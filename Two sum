M-1 Brute Force

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int i=0;int j=0;
        for(i=0;i<nums.length-1;i++)
        {
            for(j=i+1;j<nums.length;j++)
            {
                if(nums[i]+nums[j]==target)
                {
                    return new int[]{i,j};
                }

            }
       }
       return new int[]{};
       }}
            
 ##T.C O(n^2)
 ##S.C O(n)
 
 M-2 Using Hashing
 
 class Solution {
    public int[] twoSum(int[] nums, int target) {
        
              Map<Integer,Integer>map=new HashMap<>();
        for(int i=0;i<nums.length;i++)
        {
            map.put(nums[i],i);
        }
        for(int i=0;i<nums.length;i++)
        {
            int num=nums[i];
            int rem=target-num;
            if(map.containsKey(rem))
            {
                if(map.get(rem)==i) continue;
                return new int[]{i,map.get(rem)};
            }
        }
        return new int[]{};
    }
}

T.C O(n)
S.C O(n)
